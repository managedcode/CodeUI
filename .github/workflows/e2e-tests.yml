name: Playwright E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Playwright
      run: |
        npm init -y
        npm install @playwright/test
        npx playwright install ${{ matrix.browser }}
    
    - name: Restore and build solution
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore
    
    - name: Start application
      run: |
        dotnet run --project CodeUI.AppHost --configuration Release &
        echo "APP_PID=$!" >> $GITHUB_ENV
        
        # Wait for application to be ready
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -s http://localhost:5225 > /dev/null; then
            echo "Application is ready!"
            break
          fi
          echo "Attempt $i: Application not ready, waiting..."
          sleep 2
        done
        
        # Final check
        curl -f http://localhost:5225 || (echo "Application failed to start" && exit 1)
    
    - name: Run Playwright tests
      run: |
        # Create test directory structure
        mkdir -p tests/e2e
        
        # Create Playwright config
        cat > playwright.config.js << 'EOF'
        const { defineConfig, devices } = require('@playwright/test');
        
        module.exports = defineConfig({
          testDir: './tests/e2e',
          fullyParallel: true,
          forbidOnly: !!process.env.CI,
          retries: process.env.CI ? 2 : 0,
          workers: process.env.CI ? 1 : undefined,
          reporter: [
            ['html'],
            ['junit', { outputFile: 'test-results/results.xml' }]
          ],
          use: {
            baseURL: 'http://localhost:5225',
            trace: 'on-first-retry',
            screenshot: 'only-on-failure',
          },
          projects: [
            {
              name: '${{ matrix.browser }}',
              use: { ...devices['Desktop ${{ matrix.browser }}'] },
            },
          ],
          webServer: {
            command: 'echo "Application already running"',
            url: 'http://localhost:5225',
            reuseExistingServer: true,
          },
        });
        EOF
        
        # Create basic E2E tests based on Issue #17 requirements
        cat > tests/e2e/auth-flow.spec.js << 'EOF'
        const { test, expect } = require('@playwright/test');
        
        test.describe('Authentication Flow', () => {
          test('should display login UI and navigate to home page', async ({ page }) => {
            await page.goto('/');
            
            // Check if the page loads
            await expect(page).toHaveTitle(/CodeUI/);
            
            // Check for login display component
            const loginDisplay = page.locator('text=Login');
            await expect(loginDisplay).toBeVisible();
            
            // Check navigation elements
            await expect(page.locator('text=Home')).toBeVisible();
            await expect(page.locator('text=Counter')).toBeVisible();
            await expect(page.locator('text=Weather')).toBeVisible();
          });
          
          test('should navigate to different pages', async ({ page }) => {
            await page.goto('/');
            
            // Navigate to Counter page
            await page.click('text=Counter');
            await expect(page.locator('h1')).toContainText('Counter');
            
            // Navigate to Weather page  
            await page.click('text=Weather');
            await expect(page.locator('h1')).toContainText('Weather');
            
            // Navigate back to Home
            await page.click('text=Home');
            await expect(page.locator('h1')).toContainText('Hello, world!');
          });
        });
        EOF
        
        cat > tests/e2e/counter-interaction.spec.js << 'EOF'
        const { test, expect } = require('@playwright/test');
        
        test.describe('Counter Interaction', () => {
          test('should increment counter when button is clicked', async ({ page }) => {
            await page.goto('/counter');
            
            // Check initial state
            const currentCount = page.locator('[data-testid="current-count"]').or(page.locator('text=Current count:')).first();
            await expect(currentCount).toBeVisible();
            
            // Find and click the increment button
            const incrementButton = page.locator('button').filter({ hasText: 'Click me' });
            await expect(incrementButton).toBeVisible();
            
            // Click multiple times and verify counter increments
            for (let i = 1; i <= 3; i++) {
              await incrementButton.click();
              await page.waitForTimeout(100); // Small delay for Blazor to update
            }
            
            // Verify the counter has been incremented (Blazor should show the count)
            await expect(page.locator('text=Current count: 3').or(page.locator('text=3'))).toBeVisible();
          });
        });
        EOF
        
        cat > tests/e2e/responsive-mobile.spec.js << 'EOF'
        const { test, expect } = require('@playwright/test');
        
        test.describe('Mobile Responsive View', () => {
          test('should display correctly on mobile devices', async ({ page }) => {
            // Set mobile viewport
            await page.setViewportSize({ width: 375, height: 667 });
            await page.goto('/');
            
            // Check if navigation is accessible
            await expect(page.locator('text=Home')).toBeVisible();
            
            // Check if main content is visible
            await expect(page.locator('h1')).toContainText('Hello, world!');
            
            // Test navigation in mobile view
            await page.click('text=Counter');
            await expect(page.locator('h1')).toContainText('Counter');
          });
        });
        EOF
        
        cat > tests/e2e/weather-data.spec.js << 'EOF'
        const { test, expect } = require('@playwright/test');
        
        test.describe('Weather Forecast', () => {
          test('should display weather forecast data', async ({ page }) => {
            await page.goto('/weather');
            
            // Check page title
            await expect(page.locator('h1')).toContainText('Weather');
            
            // Check if weather data table/content is present
            // This assumes the weather component displays some data
            await expect(page.locator('body')).toContainText('forecast').or(page.locator('body')).toContainText('weather');
          });
        });
        EOF
        
        cat > tests/e2e/app-startup.spec.js << 'EOF'
        const { test, expect } = require('@playwright/test');
        
        test.describe('Application Startup', () => {
          test('should load application successfully', async ({ page }) => {
            await page.goto('/');
            
            // Check basic app structure
            await expect(page).toHaveTitle(/CodeUI/);
            
            // Check for main layout elements
            await expect(page.locator('.navbar, nav, header').first()).toBeVisible();
            
            // Check that JavaScript/Blazor is working
            await expect(page.locator('text=Home')).toBeVisible();
            
            // Verify no console errors
            const errors = [];
            page.on('console', msg => {
              if (msg.type() === 'error') {
                errors.push(msg.text());
              }
            });
            
            await page.reload();
            await page.waitForTimeout(2000);
            
            // Allow some minor errors but not critical ones
            const criticalErrors = errors.filter(error => 
              error.includes('Failed to fetch') || 
              error.includes('Network error') ||
              error.includes('500')
            );
            
            expect(criticalErrors.length).toBe(0);
          });
        });
        EOF
        
        # Run the tests
        npx playwright test --project=${{ matrix.browser }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30
    
    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-screenshots-${{ matrix.browser }}
        path: test-results/
        retention-days: 30
    
    - name: Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi
        pkill -f "CodeUI.AppHost" || true
        pkill -f "CodeUI.Web" || true